@page "/cricket/{gameId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h1>Darticorny</h1>

<div>
    <label for="d1">Dart 1</label>
    <input id="d1" type="number" @bind="Segment1" />
    <label for="c1">Count</label>
    <input id="c1" type="number" @bind="Count1" />
</div>
<div>
    <label for="d2">Dart 2</label>
    <input id="d2" type="number" @bind="Segment2" />
    <label for="c2">Count</label>
    <input id="c2" type="number" @bind="Count2" />
</div>
<div>
    <label for="d3">Dart 3</label>
    <input id="d3" type="number" @bind="Segment3" />
    <label for="c3">Count</label>
    <input id="c3" type="number" @bind="Count3" />
</div>
<button class="btn btn-primary" @onclick="SubmitScore">Submit</button>

<h1>Scoreboard</h1>
@if (Scores != null && CurrentGame != null)
{
    <div style="display: flex;">
        <div style="padding: 0 10px">
            <div><strong>Player</strong></div>
            <div><strong>20</strong></div>
            <div><strong>19</strong></div>
            <div><strong>18</strong></div>
            <div><strong>17</strong></div>
            <div><strong>16</strong></div>
            <div><strong>15</strong></div>
            <div><strong>B </strong></div>
            <div><strong>Score</strong></div>
        </div>
        @for (var i = 0; i < CurrentGame.PlayerInfo.Count; i++)
        {
            var playerInfo = CurrentGame.PlayerInfo[i];
            var player = playerInfo.PlayerId;
    <div>
        @if (currentPlayerIndex == i)
        {
            <strong><u>@playerInfo.Name</u></strong>
        }
        else
        {
            <div>@playerInfo.Name</div>
        }
        <div>@GetCountOf(20, @player)</div>
        <div>@GetCountOf(19, @player)</div>
        <div>@GetCountOf(18, @player)</div>
        <div>@GetCountOf(17, @player)</div>
        <div>@GetCountOf(16, @player)</div>
        <div>@GetCountOf(15, @player)</div>
        <div>@GetCountOf(25, @player)</div>
        <div>@GetScoreFor(@player)</div>
    </div>
        }

    </div>
}


@code {
    protected override async Task OnInitializedAsync()
    {
        var players = await Http.GetJsonAsync<GameResponse>($"http://localhost:7071/api/cricket/{GameId}");
        CurrentGame = new Game(players.Players);
        foreach (var player in CurrentGame.PlayerInfo)
        {
            player.Name = (await Http.GetJsonAsync<PlayerInfo>($"http://localhost:7071/api/users/{player.PlayerId}")).Name;
        }
        Scores = await Http.GetJsonAsync<Turn[]>($"http://localhost:7071/api/cricket/{GameId}/score");
    }

    private class GameResponse
    {
        public Guid[] Players { get; set; }
    }

    private class PlayerInfo
    {
        public Guid PlayerId { get; set; }
        public string Name { get; set; }
    }

    private class Game
    {
        public Game(IEnumerable<Guid> players)
        {
            PlayerInfo = players.Select(p => new PlayerInfo { PlayerId = p }).ToList();
        }
        public List<PlayerInfo> PlayerInfo { get; set; }
        public void AddPlayer(PlayerInfo player) => PlayerInfo.Add(player);
        public void RemovePlayer(PlayerInfo player) => PlayerInfo.Remove(PlayerInfo.Find(p => p.PlayerId == player.PlayerId));
    }
    private Game CurrentGame { get; set; }
    private Turn[] Scores { get; set; }

    private int GetCountOf(int segment, Guid player) =>
        Math.Min(3, Scores
            .Where(t => t.PlayerId == player)
            .SelectMany(t => t.Scores)
            .Where(s => s.Segment == segment)
            .Sum(s => s.Count));

    private int GetScoreFor(Guid player) =>
        Scores
            .Where(t => t.PlayerId == player)
            .SelectMany(t => t.Scores)
            .GroupBy(s => s.Segment)
            .Select(g => new {g.Key, Count = g.Sum(s=>s.Count)})
            .Sum(o => o.Count > 3 ? (o.Count - 3) * o.Key : 0);

    private class Turn
    {
        public int Order { get; set; }
        public Guid PlayerId { get; set; }
        public Score[] Scores { get; set; }
    }

    private class Score
    {
        public int Segment { get; set; }
        public int Count { get; set; }
    }


    private int Segment1 { get; set; }
    private int Count1 { get; set; }
    private int Segment2 { get; set; }
    private int Count2 { get; set; }
    private int Segment3 { get; set; }
    private int Count3 { get; set; }

    [Parameter]
    public int GameId { get; set; }

    private int currentPlayerIndex = 0;

    private async Task SubmitScore()
    {
        var turn = new TurnRequest
        {
            PlayerId = CurrentGame.PlayerInfo[currentPlayerIndex].PlayerId,
            Scores = new Dictionary<string, int>()
        };
        turn.AddScore(Segment1, Count1);
        turn.AddScore(Segment2, Count2);
        turn.AddScore(Segment3, Count3);

        await Http.PostJsonAsync($"http://localhost:7071/api/cricket/{GameId}/turns", turn);
        ResetInputs();

        currentPlayerIndex = (currentPlayerIndex + 1) % CurrentGame.PlayerInfo.Count;

        Scores = await Http.GetJsonAsync<Turn[]>($"http://localhost:7071/api/cricket/{GameId}/score");
    }



    private void ResetInputs()
    {
        Segment1 = Count1 = Segment2 = Count2 = Segment3 = Count3 = 0;
    }

    private class TurnRequest
    {
        public Guid PlayerId { get; set; }
        public Dictionary<string, int> Scores { get; set; }

        public void AddScore(in int segment, in int count)
        {
            if (segment == 0)
                return;
            var key = segment.ToString();
            if (!Scores.ContainsKey(key))
            {
                Scores[key] = 0;
            }
            Scores[key] += count;
        }
    }
}
