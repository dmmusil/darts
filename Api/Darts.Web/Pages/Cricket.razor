@page "/cricket/{gameId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Scoreboard</h1>
@if (Scores != null && CurrentGame != null)
{

    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col"><strong>Player</strong></div>
                @for (var i = 0; i < CurrentGame.PlayerInfo.Count; i++)
                {
                    var playerInfo = CurrentGame.PlayerInfo[i];
                    <div class="col">
                        @if (currentPlayerIndex == i)
                        {
                            <strong><u>@playerInfo.Name</u></strong>
                        }
                        else
                        {
                            <div>@playerInfo.Name</div>
                        }
                    </div>
                }
            </div>
            @foreach (var segment in Segments)
            {
                <div class="row">
                    <div class="col">
                        <button disabled="@SegmentClosed(segment, currentPlayerIndex)"
                                class="btn btn-outline-primary @(SegmentClosed(segment, currentPlayerIndex)?"disabled":"")"
                                @onclick="()=>RecordMark(segment)">
                            @segment
                        </button>
                    </div>
                    @foreach (var player in CurrentGame.PlayerInfo)
                    {
                        <div class="col">@GetCountOf(@segment, player.PlayerId)</div>
                    }
                </div>
            }
            <div class="row">
                <div class="col">Score</div>
                @foreach (var player in CurrentGame.PlayerInfo)
                {
                    <div class="col">@GetScoreFor(player.PlayerId)</div>
                }
            </div>
        </div>
        <div class="col"></div>
        <div class="col"></div>
    </div>
    <div>
        @ActiveTurn.ToString()
        @if (ActiveTurn.HasScores)
        {
            <button class="btn btn-danger" @onclick="()=>ActiveTurn.Reset()">Reset</button>
        }
        <button class="btn btn-primary" @onclick="SubmitScore">Submit</button>
    </div>
    @:Marks per turn
    <div style="display: flex">
        @foreach (var playerInfo in CurrentGame.PlayerInfo)
        {
            <div>
                <div>@playerInfo.Name</div>
                <div>@MarksPerTurn(playerInfo.PlayerId)</div>
            </div>
        }
    </div>
}


@code {
    protected override async Task OnInitializedAsync()
    {
        var players = await Http.GetJsonAsync<GameResponse>($"http://localhost:7071/api/cricket/{GameId}");
        CurrentGame = new Game(players.Players);
        foreach (var player in CurrentGame.PlayerInfo)
        {
            player.Name = (await Http.GetJsonAsync<PlayerInfo>($"http://localhost:7071/api/users/{player.PlayerId}")).Name;
        }
        Scores = await Http.GetJsonAsync<Turn[]>($"http://localhost:7071/api/cricket/{GameId}/score");
    }

    private class GameResponse
    {
        public Guid[] Players { get; set; }
    }

    private class PlayerInfo
    {
        public Guid PlayerId { get; set; }
        public string Name { get; set; }
    }

    private class Game
    {
        public Game(IEnumerable<Guid> players)
        {
            PlayerInfo = players.Select(p => new PlayerInfo { PlayerId = p }).ToList();
        }
        public List<PlayerInfo> PlayerInfo { get; set; }

        public void AddPlayer(PlayerInfo player) => PlayerInfo.Add(player);
        public void RemovePlayer(PlayerInfo player) => PlayerInfo.Remove(PlayerInfo.Find(p => p.PlayerId == player.PlayerId));
    }
    private Game CurrentGame { get; set; }
    private Turn[] Scores { get; set; }

    private int GetCountOf(int segment, Guid player) =>
        Math.Min(3, Scores
            .Where(t => t.PlayerId == player)
            .SelectMany(t => t.Scores)
            .Where(s => s.Segment == segment)
            .Sum(s => s.Count));

    private int GetScoreFor(Guid player) =>
        Scores
            .Where(t => t.PlayerId == player)
            .SelectMany(t => t.Scores)
            .GroupBy(s => s.Segment)
            .Select(g => new { g.Key, Count = g.Sum(s => s.Count) })
            .Sum(o => o.Count > 3 ? (o.Count - 3) * o.Key : 0);

    private decimal MarksPerTurn(Guid player)
    {
        if (!Scores.Any(t => t.PlayerId == player))
        {
            return 0;
        }

        var turns = Scores
            .Where(t => t.PlayerId == player);
        var marks = turns
            .SelectMany(t => t.Scores).Sum(t => t.Count);
        return marks / (decimal)turns.Count();
    }

    private bool SegmentClosed(int segment, int playerIndex)
    {
        // a segment is closed when all players have 3 or more marks
        var playerId = CurrentGame.PlayerInfo[playerIndex].PlayerId;
       
        var currentPlayerSegmentScore = Scores.Where(t => t.PlayerId == playerId)
            .SelectMany(t => t.Scores)
            .Where(s => s.Segment == segment)
            .Sum(s => s.Count);

        var currentPlayerClosed = currentPlayerSegmentScore + ActiveTurn.GetCountFor(segment) >= 3;
        var otherPlayersHavePlayed = Scores.Any(t => t.PlayerId != playerId);
        var allOthersClosed = Scores.Where(t => t.PlayerId != playerId)
            .Select(t => new
            {
                t.PlayerId,
                Marks = t.Scores.Where(s => s.Segment == segment)
                .Sum(s => s.Count)
            })
            .GroupBy(p => p.PlayerId)
            .All(g => g.Sum(p => p.Marks) >= 3);
        return allOthersClosed && currentPlayerClosed && otherPlayersHavePlayed;
    }

    private class Turn
    {
        public int Order { get; set; }
        public Guid PlayerId { get; set; }
        public Score[] Scores { get; set; }
    }

    private class Score
    {
        public int Segment { get; set; }
        public int Count { get; set; }
    }

    private int[] Segments = new[] { 20, 19, 18, 17, 16, 15, 25 };

    [Parameter]
    public int GameId { get; set; }

    private int currentPlayerIndex = 0;

    private TurnRequest ActiveTurn = new TurnRequest();

    private void RecordMark(int segment)
    {
        ActiveTurn.PlayerId = CurrentGame.PlayerInfo[currentPlayerIndex].PlayerId;
        ActiveTurn.AddScore(segment, 1);
    }

    private async Task SubmitScore()
    {
        await Http.PostJsonAsync($"http://localhost:7071/api/cricket/{GameId}/turns", ActiveTurn);

        currentPlayerIndex = (currentPlayerIndex + 1) % CurrentGame.PlayerInfo.Count;
        ActiveTurn = new TurnRequest { PlayerId = CurrentGame.PlayerInfo[currentPlayerIndex].PlayerId };
        Scores = await Http.GetJsonAsync<Turn[]>($"http://localhost:7071/api/cricket/{GameId}/score");
    }

    private class TurnRequest
    {
        public Guid PlayerId { get; set; }
        public Dictionary<string, int> Scores { get; } = new Dictionary<string, int>();

        public void AddScore(in int segment, in int count)
        {
            if (segment == 0)
                return;
            var key = segment.ToString();
            if (!Scores.ContainsKey(key))
            {
                Scores[key] = 0;
            }
            Scores[key] += count;
        }

        public void Reset() => Scores.Clear();
        public bool HasScores => Scores.Any();
        public int GetCountFor(int segment)
        {
            if (Scores.ContainsKey(segment.ToString()))
            {
                return Scores[segment.ToString()];
            }
            return 0;
        }

        public override string ToString()
        {
            var str = "";
            foreach (var score in Scores)
            {
                str += $"{score.Key}x{score.Value}, ";
            }
            return str.TrimEnd(' ', ',');
        }
    }
}
